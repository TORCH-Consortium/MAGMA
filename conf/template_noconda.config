/*
 * Copyright (c) 2021-2024 MAGMA pipeline authors, see https://doi.org/10.1371/journal.pcbi.1011648
 *
 * This file is part of MAGMA pipeline, see https://github.com/TORCH-Consortium/MAGMA
 *
 * For quick overview of GPL-3 license, please refer
 * https://www.tldrlegal.com/license/gnu-general-public-license-v3-gpl-3
 *
 * - You MUST keep this license with original authors in your copy
 * - You MUST acknowledge the original source of this software
 * - You MUST state significant changes made to the original software
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program . If not, see <http://www.gnu.org/licenses/>.
 */

//NOTE: Result directories used in magma_main.py
// os.path.join(args['output_dir'], 'mapped_singles')
// os.path.join(args['output_dir'], 'mapped')
// os.path.join(args['output_dir'], 'gvcf')
// os.path.join(args['output_dir'], 'stats')
// os.path.join(args['output_dir'], 'fastqc')
// os.path.join(args['output_dir'], 'quanttb')
// os.path.join(args['output_dir'], 'checkpoints')
// os.path.join(args['output_dir'], 'resistance/lofreq')
// os.path.join(args['output_dir'], 'structural_vars')
// os.path.join(args['output_dir'], 'minor_vars')
// os.path.join(args['output_dir'], 'logs/error')
// os.path.join(args['output_dir'], 'logs/info')]

// os.path.join(args['output_dir'], 'vcf/{}'.format(args['vcf_name']))
// os.path.join(args['output_dir'], 'vqsr/{}'.format(args['vcf_name']))
// os.path.join(args['output_dir'], 'fasta/{}'.format(args['vcf_name']))
// os.path.join(args['output_dir'], 'phylogeny/{}'.format(args['vcf_name']))
// os.path.join(args['output_dir'], 'resistance/{}/magma'.format(args['vcf_name']))
// os.path.join(args['output_dir'], 'logs/{}.summary'.format(args['vcf_name'])), 'w')


params {

    input_samplesheet = "${projectDir}/resources/reference_set/magma.pbs.test.csv"
    outdir = "${projectDir}/results"

    //-----------------------
    // Custom tool paths on the cluster
    //-----------------------

    //NOTE: Since conda is installed in the cluster, we'll rely upon the conda profile
    /*
    software_path = "/home/shared_data_ghi/CWGSMTB/Software"
    conda_dir = "${params.software_path}/anaconda3"
    fastqc_path = "${params.software_path}/FastQC-0.11.8/fastqc"
    bwa_path = "${params.software_path}/bwa-0.7.17/bwa"
    samtools_path = "${params.software_path}/samtools-1.9/samtools"
    clusterpicker_path = "${params.software_path}/ClusterPicker_1.2.3/ClusterPicker_1.2.3.jar"
    quanttb_venv = "${params.software_path}/FixedQuantTB/"
    quanttb_path = "quanttb"
    gatk_path = "${params.software_path}/gatk-4.2.0.0/gatk"
    lofreq_path = "${params.software_path}/lofreq-2.1.5/src/lofreq/lofreq"
    delly_path = "${params.software_path}/delly-v0.8.7/delly_v0.8.7_linux_x86_64bit"
    bcftools_path = "${params.software_path}/bcftools-1.9/bcftools"
    snpeff_path = " ${params.software_path}/jre-8.131/bin/java -jar ${params.software_path}/snpeff-4.3T/snpEff/snpEff.jar"
    snpdists_path= "${params.software_path}/snp-dists/snp-dist"
    snpsites_path= "${params.software_path}/snp-sites-2.4.0/src/snp-sites"
    bgzip_path= "${params.software_path}/tabix-0.2.6/bgzip"
    tb_profiler_path= "${params.software_path}/TBProfiler/tb-profiler"
    tb_profiler_venv="${params.software_path}/venv_tbprofiler/"
    iqtree_path= "${params.software_path}/iqtree-2.1.2-Linux/bin/iqtree2"

    */

    //-----------------------
    // Custom results location on the cluster
    //-----------------------

    //NOTE: Below is an example
    // BWA_MEM.results_dir = "/home/shared_data_ghi/CWGSMTB/results/bwa/mem"
}

executor {
    queueSize = 10
    // pollInterval = '10sec'
    // submitRateLimit = '50/2min'
}

process {
    executor = "pbs" // OR "pbspro"
    queue = "scattergather"
    clusterOptions = "-A GHI "

    cpus = 4
    memory = 8.GB

    withName: '.*QUANTTB.*' {
        memory = 32.GB
    }
}
